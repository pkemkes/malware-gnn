import json
import os
import networkx as nx
from networkx.readwrite.json_graph import node_link_data


def add_self_edges(number_of_nodes, edges):
    for node in range(number_of_nodes):
        edges.append((node, node))
    return edges


def get_graph(feature_lists, verdicts, families, shas, edges):
    number_of_nodes = len(feature_lists)
    nodes = [(id_num, {"features": features, "verdict": verdict, "family": family, "sha256": sha256})
             for id_num, features, verdict, family, sha256
             in zip(range(number_of_nodes), feature_lists, verdicts, families, shas)]
    edges = add_self_edges(number_of_nodes, edges)
    graph = nx.Graph()
    graph.add_nodes_from(nodes)
    graph.add_edges_from(edges)
    return graph


def main():
    datadir = os.path.join("data", "multiclass")
    rawdir = os.path.join(datadir, "raw")
    if not os.path.exists(rawdir):
        os.makedirs(rawdir)
    metapath_types = ["command_line", "http_request", "registry_entry"]
    for metapath_type in metapath_types:
        data = example_data[metapath_type]
        for i, node in enumerate(data):
            feature_lists, verdicts, families, shas, edges = node.values()
            subgraph = get_graph(feature_lists, verdicts, families, shas, edges)
            subgraph_dict = node_link_data(subgraph)
            with open(os.path.join(rawdir, f"{metapath_type}-{i:04}.json"), "w") as f:
                json.dump(subgraph_dict, f, indent=4)
    labels = [1.0, 4.0, 0.0]
    with open(os.path.join(datadir, "labels.json"), "w") as f:
        json.dump(labels, f, indent=4)
    sha_list = ["abc10", "abc20", "abc30"]
    with open(os.path.join(datadir, "sha_list.json"), "w") as f:
        json.dump(sha_list, f, indent=4)


example_data = {
    "command_line": [
        {
            "feature_lists": [
                [3, 73.1, 0, 443, 0.123412],
                [4, 87.2, 1, 412, 0.564331],
                [1, 293.3, 1, 302, 0.183754],
                [9, 18923.1, 0, 101, 0.9838382],
                [0, 32.9, 1, 302, 0.939192]
            ],
            "verdicts": [1, 0, 1, 1, 1],
            "families": ["blackmoon", "", "other", "blackmoon", "redline"],
            "shas": ["abc10", "abc11", "abc12", "abc13", "abc14"],
            "edges": [(0, 1), (0, 2), (0, 3), (1, 4)]
        },
        {
            "feature_lists": [
                [6, 382.3, 1, 123, 0.123456],
                [3, 999.4, 1, 5432, 0.125487],
                [8, 11.2, 0, 123, 0.326541]
            ],
            "verdicts": [1, 2, 0],
            "families": ["salgorea", "", ""],
            "shas": ["abc20", "abc21", "abc22"],
            "edges": [(0, 1), (1, 2)]
        },
        {
            "feature_lists": [
                [6, 392.1, 1, 351, 0.568785],
                [3, 5721.4, 1, 854, 0.998877],
                [4, 2.4, 1, 1023, 0.123456],
                [2, 12893.3, 1, 239, 0.654321]
            ],
            "verdicts": [1, 0, 2, 1],
            "families": ["berbew", "", "", "berbew"],
            "shas": ["abc30", "abc31", "abc32", "abc33"],
            "edges": [(0, 1), (0, 2), (2, 3)]
        }
    ],
    "http_request": [
        {
            "feature_lists": [
                [0.2, 3, 1],
                [0.7, 5, 1],
                [1., 12, 1],
                [0., 32, 1]
            ],
            "verdicts": [1, 0, 0, 0],
            "families": ["blackmoon", "", "", ""],
            "shas": ["abc10", "abc15", "abc16", "abc17"],
            "edges": [(0, 1), (0, 2), (1, 3)]
        },
        {
            "feature_lists": [
                [0.5, 6, 0],
                [0.3, 3, 0],
                [0.6, 2, 1],
                [0.4, 3, 0],
                [0.1, 4, 0]
            ],
            "verdicts": [1, 1, 1, 1, 1],
            "families": ["salgorea", "salgorea", "salgorea", "blackmoon", "salgorea"],
            # sample at index 3 with sha abc10 will get "unknown" verdict and family after preprocessing
            # because it is one of the three main samples
            "shas": ["abc20", "abc23", "abc24", "abc10", "abc26"],
            "edges": [(0, 1), (0, 2), (0, 3), (3, 4)]
        },
        {
            "feature_lists": [
                [0.8, 12, 0],
                [0.6, 11, 0],
            ],
            "verdicts": [1, 0],
            "families": ["berbew", ""],
            "shas": ["abc30", "abc34"],
            "edges": [(0, 1)]
        }
    ],
    "registry_entry": [
        {
            "feature_lists": [
                [123, 3],
                [232, 3],
                [123123, 3],
                [3893, 5],
                [1, 9],
                [33333, 8]
            ],
            "verdicts": [1, 1, 1, 0, 2, 1],
            "families": ["blackmoon", "blackmoon", "blackmoon", "", "", "other"],
            "shas": ["abc10", "abc18", "abc19", "abc1a", "abc1b", "abc1c"],
            "edges": [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 3)]
        },
        {
            "feature_lists": [
                [393, 4],
                [2, 1],
                [323, 7]
            ],
            "verdicts": [1, 0, 2],
            "families": ["salgorea", "", ""],
            "shas": ["abc20", "abc27", "abc28"],
            "edges": [(0, 1), (1, 2)]
        },
        {
            "feature_lists": [
                [2323, 4],
                [3, 4],
                [2, 4],
                [123983, 1],
                [3534, 4]
            ],
            "verdicts": [1, 1, 1, 1, 2],
            "families": ["berbew", "salgorea", "berbew", "berbew", ""],
            "shas": ["abc30", "abc35", "abc36", "abc37", "abc38"],
            "edges": [(0, 1), (0, 2), (0, 3), (0, 4), (1, 2)]
        }
    ]
}


if __name__ == '__main__':
    main()
