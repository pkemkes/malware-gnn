import torch
from typing import Sequence, Iterator

"""
This is a custom variaton of pyTorch's Sampler to allow a concatenation of both training and validation sets
while still being able to use randomization of both sets.
Using concatenated sets enables the dataloader workers to already load the validation data 
during the last training batches.
"""


class TrainValSubsetRandomSampler(torch.utils.data.Sampler[int]):
    train_indices: Sequence[int]
    val_indices: Sequence[int]

    def __init__(self, train_indices: Sequence[int], val_indices: Sequence[int], generator=None) -> None:
        self.train_indices = train_indices
        self.val_indices = val_indices
        self.generator = generator

    def __iter__(self) -> Iterator[int]:
        train_list = list(self.train_indices[i]
                          for i in torch.randperm(len(self.train_indices), generator=self.generator))
        val_list = list(self.val_indices[i] for i in torch.randperm(len(self.val_indices), generator=self.generator))
        return iter(train_list + val_list)

    def __len__(self) -> int:
        return len(self.train_indices) + len(self.val_indices)
