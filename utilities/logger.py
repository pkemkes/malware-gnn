import logging
import os
import sys
import random

"""
Custom logger class that simplifies logging to both stdout and file. 
It also takes verbosity into account.
"""


class Logger:

    def __init__(self, log_dir: str, log_fn: str, verbosity: int = 0, name: str = None, log_to_stdout: bool = False):
        self.verbosity = verbosity
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        if name is None:
            name = str(random.randint(0, 2**32))
        logger = logging.getLogger(name)
        logger.setLevel(logging.INFO)
        log_formatter = logging.Formatter("%(asctime)s - %(message)s", datefmt="%Y-%m-%d %H:%M:%S")
        logfile_handler = logging.FileHandler(os.path.join(log_dir, log_fn))
        logfile_handler.setFormatter(log_formatter)
        logger.addHandler(logfile_handler)
        if log_to_stdout:
            logstdout_handler = logging.StreamHandler(sys.stdout)
            logstdout_handler.setFormatter(log_formatter)
            logger.addHandler(logstdout_handler)
        self.logger = logger

    def log(self, msg: str, req_verbosity: int = 0, level: int = logging.INFO):
        if req_verbosity <= self.verbosity:
            self.logger.log(level, msg)
